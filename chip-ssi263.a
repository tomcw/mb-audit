;license:MIT
;(c) 2021 by Tom Charlesworth
;
; SSI263 related
;

;------------------------------------------------------------------------------

DetectSSI263
; Pre: zpTmp1 = 6522 bitmap in b1:0
; Post:

	; SSI263 is only on MB-C & Phasor, both of which have 2x 6522's
	; - Speech using 6522 PCR w/o IRQ (based on Willy Byte's SSI263 detection code)

	lda		#SSI_A_BASE
	sta		SSI263BaseL
	lda		MBBaseH
	sta		SSI263BaseH

	lda		#SY6522_B_BASE
	sta		MBBaseL

	lda		#1
	sta		zpTmp2						; mask

	lda		zpTmp1
	and		#HAS_6522B					; SSI263A is connected to 2nd 6522
	beq		@nextSSI263

@loop	lda		#IER_CLR|IxR_SSI263
		ldy		#SY6522_IER
		sta		(MBBase),y				; disable CA1(Speech) IRQ

		jsr		KickSSI263

		lda		#$FF
		jsr		WAIT					; delay for 0x28882 (166018) cycles / ~163ms

		ldy		#SY6522_IFR
		lda		#IxR_SSI263				; check CA1(Speech) IRQ
		and		(MBBase),y
		beq		@nextSSI263
		sta		(MBBase),y				; clear CA1(Speech) IRQ

			jsr		DisableSSI263
			lda		zpTmp2
			ora		hasSSI263
			sta		hasSSI263

@nextSSI263
		lda		MBBaseL
		beq		+
		lda		#SSI_B_BASE
		sta		SSI263BaseL
		lda		#SY6522_A_BASE
		sta		MBBaseL
		asl		zpTmp2					; mask<<1

		lda		zpTmp1
		and		#HAS_6522A				; SSI263B is connected to 1st 6522
		bne		@loop

+	rts

;------------------------------------------------------------------------------

DisableSSI263
; NB. Called from userland & ISR

	lda		#CONTROL_H
	ldy		#SSI_CTTRAMP
	sta		(SSI263Base),y

	lda		#MODE_IRQ_DISABLED+$00	; DR1:DR0=0, P5:P0=$00
	ldy		#SSI_DURPHON
	sta		(SSI263Base),y

	lda		#CONTROL_L				; H->L sets SSI263 operation mode = DR1:DR0, ie. IRQ inactive
	ldy		#SSI_CTTRAMP
	sta		(SSI263Base),y

	rts

;------------------------------------------------------------------------------

KickSSI263

	lda		#$0C					; Peripheral for PA port Control: CA2 = low output (Pin18: Power Down/Reset)
									; CA1 = negative active edge (input) (Pin4: A/!R)
	ldy		#SY6522_PCR
	sta		(MBBase),y

	lda		#IxR_SSI263
	ldy		#SY6522_IFR
	sta		(MBBase),y				; clear CA1(Speech) IRQ after setting PCR

KickSSI263_no_PCR

	lda		#CONTROL_H
	ldy		#SSI_CTTRAMP
	sta		(SSI263Base),y

	; Warning: stepping this won't yield an IRQ, since the phoneme completes before H->L (assuming prev mode=MODE_IRQ_DISABLED)
	lda		#MODE_PHONEME_TRANSITIONED_INFLECTION+$00	; DR1:DR0=3 , P5:P0=$00
	ldy		#SSI_DURPHON
	sta		(SSI263Base),y

	lda		#CONTROL_L				; H->L sets SSI263 operation mode = DR1:DR0, ie. IRQ active
	ldy		#SSI_CTTRAMP
	sta		(SSI263Base),y

	rts

;------------------------------------------------------------------------------

PlaySSI263_no_PCR

	ldy		#1
	bne		+

PlaySSI263
; Pre: X:A = phoneme data
;	MB mode    : MBBaseL = SY6522_A_BASE    / SY6522_B_BASE
;	Phasor mode: MBBaseL = SY6522_A_PH_BASE / SY6522_B_BASE

	ldy		#0
+	sty		zpTmp2

	sta		SpeechDataL
	stx		SpeechDataH

	sei
	inc		doingSpeech

	lda		#0
	sta		irqT1IntCount

	lda		zpTmp2
	bne		@noPCR1
		jsr		KickSSI263
		jmp		+
@noPCR1	jsr		KickSSI263_no_PCR
+

	lda		#$ff					; T1C = T1L = $FFFF
	ldy		#SY6522_TIMER1L_COUNTER
	sta		(MBTimer),y
	iny								; SY6522_TIMER1H_COUNTER
	sta		(MBTimer),y				; (and clears IFR.b6)

	lda		#ACR_FREERUNNING
	ldy		#SY6522_ACR
	sta		(MBTimer),y				; Free-running timer

	lda		#IER_SET|IxR_TIMER1
	ldy		#SY6522_IER
	sta		(MBTimer),y				; Enable Timer1 IRQ

	lda		zpTmp2
	bne		@noPCR2
		lda		#IER_SET|IxR_SSI263
		;ldy	#SY6522_IER
		sta		(MBBase),y			; Enable CA1(Speech) IRQ
@noPCR2

	cli

	rts

;------------------------------------------------------------------------------

TestSSI263
; Pre: has6522, hasSSI263
; Post: C=0(OK), C=1(NG)
; Uses: zpTmp1 (so don't use in sub-funcs)

	lda		has6522
	and		#HAS_6522A
	beq		+
		lda		#IER_CLR|IxR_TIMER1|IxR_TIMER2|IxR_SSI263
		ldy		#SY6522_A_BASE+SY6522_IER	; disable IRQ
		sta		(MBBase),y
		ldy		#SY6522_A_BASE+SY6522_IFR	; clear IRQ flag
		sta		(MBBase),y
+	lda		has6522
	and		#HAS_6522B
	beq		+
		lda		#IER_CLR|IxR_TIMER1|IxR_TIMER2|IxR_SSI263
		ldy		#SY6522_B_BASE+SY6522_IER	; disable IRQ
		sta		(MBBase),y
		ldy		#SY6522_B_BASE+SY6522_IFR	; clear IRQ flag
		sta		(MBBase),y
+

	lda		#<TestSSI263ISR
	ldx		#>TestSSI263ISR
	jsr		SetIrqVector			; Since we have an SSI263, then MB card won't generate NMI

	lda		#COMPONENT_SSI263+1		; test component $41
	sta		testComponentNum
	lda		#$ff
	sta		testNum					; test #00

	lda		#SSI_A_BASE
	sta		SSI263BaseL
	lda		MBBaseH
	sta		MBTimerH
	sta		SSI263BaseH
	lda		#SY6522_B_BASE
	sta		MBBaseL
	sta		MBTimerL				; NB. MBTimer is used for TIMER1, and so doesn't change for SSI263A/SSI263B

	lda		hasSSI263
	lsr
	sta		zpTmp1
	bcc		@nextSSI263

@loop	inc		testNum				; test #00, 05
		jsr		T263_0
		bcs		@error

		inc		testNum				; test #01, 06
		jsr		T263_1
		bcs		@error

		inc		testNum				; test #02, 07
		jsr		T263_2
		bcs		@error

		inc		testNum				; test #03, 08
		jsr		T263_3
		bcs		@error

		inc		testNum				; test #04, 09
		jsr		T263_4
		bcs		@error

@nextSSI263
		lda		#SSI_B_BASE
		sta		SSI263BaseL
		lda		#SY6522_A_BASE
		sta		MBBaseL

		lsr		zpTmp1
		bcs		@loop

	clc
	rts

@error
; Pre: zpTmp2 = expected value
;	A = actual value
; Post: C=1(NG)

	sta		errorActual
	lda		zpTmp2
	sta		errorExpected

	lda		#0
	sta		MBBaseL

	sec
	rts

;------------------------------------------------------------------------------

CalcPhraseDuration

	lda		irqT1IntCount
	sta		phraseDuration+0			;# T1 ints

	lda		irqT1H
	cmp		irqT1H2
	beq		+
		; T1 underflow between T1H & T1H2, so use: T1=T1H|00
		; and irqT1IntCount will account for the underflow
		lda		#0
		sta		irqT1L

	; NB. normally for multi-byte subtraction you'd start with T1L, but since there's no borrow ($FFFF-HHLL) it's OK this way!
	; (do it this way so that the order is: phraseDuration-H,M,L)
+	sec									; $FFFF - T1H|T1L
	lda		#$ff
	sbc		irqT1H
	sta		phraseDuration+1			;T1H

	lda		#$ff
	sbc		irqT1L
	sta		phraseDuration+2			;T1L

	rts

;------------------------------------------------------------------------------

T263_0
; Pre: MBBase, SSI263Base
; Post: C=0(OK), C=1(NG)
;
; Test#0
; . Play phrase "CLASSIC ADVENTURE" and check total duration is within tolerance

	jsr		resetSubTest			; subTest #0
	jsr		incTotalTests

	lda		#<ClassicAdv
	ldx		#>ClassicAdv
	jsr		PlaySSI263

	ldy		#10	; delay of 0x19555F cycles = 1,660,255 = ~1.623s
-		lda		#$ff
		jsr		WAIT
		lda		doingSpeech			; done? (or user hit ESC to skip)
		beq		@ok
		dey
		bne		-

	beq		@error

@ok	clc								; C=0(OK)
	bcc		@done

@error
	; Error: phrase not complete
	lda		#0
	sta		zpTmp2					; expected
	sec								; C=1(NG)

@done
	sei
	php

	ldy		#SY6522_IER
	lda		#IER_CLR|IxR_SSI263
	sta		(MBBase),y				; Disable CA1(Speech) IRQ
	lda		#IER_CLR|IxR_TIMER1
	sta		(MBTimer),y				; Disable Timer1 IRQ

	jsr		CalcPhraseDuration		; Real MB: 0x132BDD,0x132E59,0x133073 (AppleWin: 0x18D3D8,0x192332/running; ~0x14EFFF,0x14F247/stepping)

	lda		#1						; actual
	plp
	rts

;------------------------------------------------------------------------------

T263_1
; Pre:
; Post: C=0(OK), C=1(NG)
;
; Test#1 (AppleWin-GH#52: the infamous Willy Byte bug!)
; . With a pending T1 IRQ, writing to SSI_FILFREQ clears the T1 IRQ
; . With a pending T2 IRQ, writing to reg8 clears the T2 IRQ
; . test the 3 addr modes: sta addr16,x; sta addr16,y; sta (zp),y

	sei

	; Ensure we are using the 6522 at $Cn00 regardless of the SSI263 we are testing
	lda		MBBaseL
	pha
	lda		#SY6522_A_BASE
	sta		MBBaseL

	; SMC to set correct addr
	lda		SSI263BaseL
	sta		@smc16x+1
	sta		@smc16y+1
	lda		SSI263BaseH
	sta		@smc16x+2
	sta		@smc16y+2

	lda		#IER_SET|IxR_TIMER1|IxR_TIMER2
	ldy		#SY6522_IER
	sta		(MBBase),y				; Enable Timer1/Timer2 IRQ
	ldy		#SY6522_IFR
	sta		(MBBase),y				; Clear any Timer1/Timer2 IRQ

	lda		#ACR_ONESHOT
	ldy		#SY6522_ACR
	sta		(MBBase),y				; T1 one-shot mode

	jsr		resetSubTest
	dec		subTestNum
	jsr		incTotalTests

	lda		#2
	sta		zpTmp2					; addr mode to test
@loop
		; Timer1 IRQ

		jsr		incSubTestNum		; subTest #0, 4, 8

		lda		#0					; Set T1C=T1L=$0000
		ldy		#SY6522_TIMER1L_COUNTER
		sta		(MBBase),y
		ldy		#SY6522_TIMER1H_COUNTER
		sta		(MBBase),y

		ldy		#SY6522_IFR
		lda		(MBBase),y
		ldx		#IxR_TIMER1
		and		#IxR_TIMER1
		beq		@error

		jsr		incSubTestNum		; subTest #1, 5, 9

		ldy		#SSI_FILFREQ		; reg4
		jsr		@FalseRead			; write to 6522.T1C_l & the write does a false read from 6522.T1C_l to clear the IRQ!

		lda		zpTmp2
		bne		+
		lda		is65C02				; NB. 65816 behaves like 6502 for sta (zp),y
		beq		+

			; sta (zp),y && 65C02
			ldy		#SY6522_IFR
			lda		(MBBase),y
			ldx		#IxR_TIMER1
			and		#IxR_TIMER1
			beq		@error
			bne		++

+		ldy		#SY6522_IFR
		lda		(MBBase),y
		ldx		#0
		and		#IxR_TIMER1
		bne		@error

++		; Timer2 IRQ

		jsr		incSubTestNum		; subTest #2, 6, A

		lda		#0					; Set T2C=$0000
		ldy		#SY6522_TIMER2L_COUNTER
		sta		(MBBase),y
		ldy		#SY6522_TIMER2H_COUNTER
		sta		(MBBase),y

		ldy		#SY6522_IFR
		lda		(MBBase),y
		ldx		#IxR_TIMER2
		and		#IxR_TIMER2
		beq		@error

		jsr		incSubTestNum		; subTest #3, 7, B

		ldy		#8					; reg8 (only 3 addr bits for SSI263, so wraps to SSI_DURPHON)
		jsr		@FalseRead			; write to 6522.T2C_l & the write does a false read from 6522.T2C_l to clear the IRQ!

		lda		zpTmp2
		bne		+
		lda		is65C02				; NB. 65816 behaves like 6502 for sta (zp),y
		beq		+

			; sta (zp),y && 65C02
			ldy		#SY6522_IFR
			lda		(MBBase),y
			ldx		#IxR_TIMER2
			and		#IxR_TIMER2
			beq		@error
			bne		++

+		ldy		#SY6522_IFR
		lda		(MBBase),y
		ldx		#0
		and		#IxR_TIMER2
		bne		@error

++		dec		zpTmp2
		bpl		@loop

	jsr		WaitT1OneShotUnderflow
	jsr		WaitT2OneShotUnderflow

	pla
	sta		MBBaseL
	clc
	rts								; C=0(OK)

@error	; pre: A=actual, X=expected
	stx		zpTmp2					; expected
	tax
	pla
	sta		MBBaseL
	txa
	sec
	rts								; C=1(NG)

;

@FalseRead
; Pre: zpTmp2=addr mode to test
;	Y=SSI reg#

	lda		#0

	ldx		zpTmp2
	beq		@addr8y
	dex
	beq		@addr16y

@addr16x
	tya
	tax
	lda		#0
@smc16x
	sta		$C440,x					; (smc)
	rts

@addr16y
@smc16y
	sta		$C440,y					; (smc)
	rts

@addr8y
	sta		(SSI263Base),y			; false-read only for 6502/65816 (not 65C02)
	rts

;------------------------------------------------------------------------------

T263_2
; Pre:
; Post: C=0(OK), C=1(NG)
;
; Test#2 - Phasor only
; . phoneme request using SSI263.D7 w/o IRQ (mode=MODE_PHONEME_TRANSITIONED_INFLECTION)
; . phoneme request using SSI263.D7 w/o IRQ (mode=MODE_IRQ_DISABLED)

	sei

	lda		isPhasorCard
	bne		+
		clc
		rts
+

	jsr		resetSubTest			; subTest #0
	jsr		incTotalTests

	lda		#PH_PHASOR
	jsr		SetPhasorMode

	lda		#$00					; Peripheral for PA port Control: CA2 = input (so don't PD/RST to SSI263)
									; CA1 = input (as before)
	ldy		#SY6522_PCR
	sta		(MBBase),y

	jsr		KickSSI263_no_PCR

	lda		#$FF
	jsr		WAIT					; delay for 0x28882 (166018) cycles / ~163ms

	; TODO AppleWin:SSI263-new: (Phasor card) once got error 41:02:00 (expected=80, actual=00) - was Stepping, which appears to be the cause

	ldy		#SSI_DURPHON
	lda		(SSI263Base),y
	and		#REQ_NEW_DATA			; D7
	beq		@errorNot80

	jsr		incSubTestNum			; subTest #1

	jsr		DisableSSI263

	; Warning: stepping this won't yield D7==0, since the phoneme completes and sets D7=1

	;   Time | D7
	;   ---------
	;      0 | 0
	;    163 | 0
	;    326 | 1					- In total wait for 163x2 = 326ms - a very long time!

	ldy		#SSI_DURPHON			; Check D7==0
	lda		(SSI263Base),y
	and		#REQ_NEW_DATA
	bne		@errorNot00

	jsr		incSubTestNum			; subTest #2

	lda		#$FF
	jsr		WAIT					; wait 163ms

!if 0 {
	ldy		#SSI_DURPHON			; Check D7==0 a 2nd time - no good on emulator!
	lda		(SSI263Base),y
	and		#REQ_NEW_DATA
	bne		@errorNot00
}

	jsr		incSubTestNum			; subTest #3

	lda		#$FF
	jsr		WAIT					; wait 163ms a 2nd time

	ldy		#SSI_DURPHON			; Check D7==1
	lda		(SSI263Base),y
	and		#REQ_NEW_DATA
	beq		@errorNot80

	jsr		incSubTestNum			; subTest #4

	lda		#0
	sta		isrFlag

	cli
	nop
	sei

	lda		isrFlag					; Check that MODE_IRQ_DISABLED prevents IRQ from occurring
	bne		@errorNot00

	clc								; C=0(OK)
	bcc		@exit

;

@errorNot00	; pre: A=actual; post X=0
	ldx		#$00
	beq		+
@errorNot80	; pre: A=actual; post X=0
	ldx		#$80

+			; pre: A=actual, X=expected
	stx		zpTmp2					; expected
	sec								; C=1(NG)

@exit
	php
	pha
	lda		#PH_MOCKINGBOARD
	jsr		SetPhasorMode
	pla
	plp
	rts

;------------------------------------------------------------------------------

T263_3
; Pre:
; Post: C=0(OK), C=1(NG)
;
; Test#3
; . Test phoneme playback using 6522 PCR IRQ (MB & Phasor)

	sei

	lda		MBBaseL
	sta		zpTmp3					; keep a copy & restore at end

	;
	; First test Mockingboard (or Phasor in Mockingboard mode)
	;

	jsr		resetSubTest			; subTest #0
	jsr		incTotalTests

	; TODO AppleWin:SSI263-new: (Phasor card) once got error 41:03:00 (expected=00, actual=04) - was stepping

	lda		#<NullPhrase
	ldx		#>NullPhrase
	jsr		PlaySSI263

-		lda		doingSpeech
		beq		+
		lda		irqT1IntCount
		cmp		#4					; timeout = ~256ms
		bcc		-					; loop if < 4
		bcs		@error
+

	sei

	lda		isPhasorCard
	beq		@done

	jsr		incSubTestNum			; subTest #1

	;
	; Now test Phasor in native Phasor mode
	; NB. Phasor uses direct IRQ (which still works even if PCR is setup)
	;

	lda		#PH_PHASOR
	jsr		SetPhasorMode

	lda		MBBaseL
	cmp		#SY6522_A_BASE
	bne		+
		lda		#SY6522_A_PH_BASE
		sta		MBBaseL
+

	lda		#<NullPhrase
	ldx		#>NullPhrase
	jsr		PlaySSI263

-		lda		doingSpeech
		beq		+
		lda		irqT1IntCount
		cmp		#4					; timeout = ~256ms
		bcc		-					; loop if < 4
		bcs		@error
+

@done
	clc								; C=0(OK)
	bcc		@exit

;

@error		; pre: A=actual
	ldx		#0						; X=expected
	stx		zpTmp2					; expected
	sec								; C=1(NG)

@exit
	sei
	php
	pha
	lda		zpTmp3
	sta		MBBaseL					; restore
	lda		#PH_MOCKINGBOARD
	jsr		SetPhasorMode

	lda		#IER_CLR|IxR_TIMER1
	ldy		#SY6522_IER
	sta		(MBTimer),y				; Disable Timer1 IRQ

	pla
	plp
	rts

;------------------------------------------------------------------------------

T263_4
; Pre:
; Post: C=0(OK), C=1(NG)
;
; Test#4
; . Test phoneme playback using direct IRQ (MB & Phasor)
; NB. Mockingboard must fail

	sei

	lda		MBBaseL
	sta		zpTmp3					; keep a copy & restore at end

	lda		#$00					; Peripheral for PA port Control: CA2 = input (so don't PD/RST to SSI263)
									; CA1 = input (as before), so for MB mode (Test#2) then IFR.b1 will be set when phoneme completes
	ldy		#SY6522_PCR
	sta		(MBBase),y

	lda		#IER_CLR|IxR_SSI263
	ldy		#SY6522_IER
	sta		(MBBase),y				; Disable CA1(Speech) IRQ
	ldy		#SY6522_IFR
	sta		(MBBase),y				; Clear any CA1(Speech) IRQ

	;
	; First test Mockingboard (or Phasor in Mockingboard mode)
	;

	jsr		resetSubTest			; subTest #0
	jsr		incTotalTests

	lda		#<NullPhrase
	ldx		#>NullPhrase
	jsr		PlaySSI263_no_PCR

	ldx		#1
-		lda		doingSpeech
		beq		@error
		lda		irqT1IntCount
		cmp		#4					; timeout = ~256ms (expected for Mockingboard)
		bcc		-					; loop if < 4
+

	sei

	jsr		incSubTestNum			; subTest #1

	; IFR=IxR_SSI263 during the timeout (as CA1=input) - verified on real Phasor h/w
	ldy		#SY6522_IFR
	lda		#IxR_SSI263
	tax								; expected
	and		(MBBase),y				; Check CA1(Speech) IRQ
	beq		@error
	sta		(MBBase),y				; Clear the CA1(Speech) IRQ

	; SSI263 is still asserting A/!R interrupt: switching to Phasor mode will cause a 6502 IRQ! (On CLI opcode)
	; NB. the 'jsr DisableSSI263' (in the ISR) doesn't de-assert the A/!R signal.
	; So use the 6522's CA1/CA2 handshake to de-assert...

	jsr		KickSSI263

	lda		#$FF
	jsr		WAIT					; delay for 0x28882 (166018) cycles / ~163ms

	jsr		incSubTestNum			; subTest #2

	; TODO AppleWin:SSI263-new: (Phasor card) once got error 41:04:02 (expected=02, actual=00) - Stepping?

	ldy		#SY6522_IFR
	lda		#IxR_SSI263
	tax								; expected
	and		(MBBase),y				; Check CA1(Speech) IRQ
	beq		@error
	sta		(MBBase),y				; Clear the CA1(Speech) IRQ

	jsr		DisableSSI263

	;

	lda		isPhasorCard
	beq		@done

	jsr		incSubTestNum			; subTest #3

	;
	; Now test Phasor in native Phasor mode
	;

	lda		#PH_PHASOR
	jsr		SetPhasorMode

	lda		MBBaseL
	cmp		#SY6522_A_BASE
	bne		+
		lda		#SY6522_A_PH_BASE
		sta		MBBaseL
+

	lda		#<NullPhrase
	ldx		#>NullPhrase
	jsr		PlaySSI263_no_PCR

-		lda		doingSpeech
		beq		+
		lda		irqT1IntCount
		cmp		#4					; timeout = ~256ms
		bcc		-					; loop if < 4
		bcs		@error0
+

@done
	clc								; C=0(OK)
	bcc		@exit

;

@error0		; pre: A=actual
	ldx		#0

@error		; pre: A=actual, X=expected
	stx		zpTmp2					; expected
	sec								; C=1(NG)

@exit
	sei
	php
	pha
	lda		zpTmp3
	sta		MBBaseL					; restore
	lda		#PH_MOCKINGBOARD
	jsr		SetPhasorMode

	lda		#IER_CLR|IxR_TIMER1
	ldy		#SY6522_IER
	sta		(MBTimer),y				; Disable Timer1 IRQ

	pla
	plp
	rts

;------------------------------------------------------------------------------

TestSSI263ISR
; Pre:
;	6502 has pushed P
;	Apple ROM has stored A to $45 (not Apple //e ROM!)
;	MBBaseL = $00 or $80
;	MBTimer (may / may not equal MBBase)
;	SpeechData
;	SSI263Base
; Post:
;	irqT1IntCount, irqT1H, irqT1H2, irqT1L
;	isrFlag=1 (on SSI263 IRQ)
;	SpeechData (incremented)
;
; NB. Need separate MBBase (for PCR) and MBTimer (for T1) because:
; If we were using SSI263B / 6522A with 6522A.TIMER1 active, then:
;  a) write to SSI263.reg4 will set T1C_L (so on next latch reload, it'll be $ffxx, not $ffff)
;  b) false-read from SSI263.reg4 (6502-only) will clear any pending T1 IRQ
;

	txa
	pha
	tya
	pha

	;------

	ldy		#SY6522_TIMER1H_COUNTER
	lda		(MBTimer),y
	sta		irqT1H

	; Read IFR.T1 before reading T1C_l (which clears IFR.T1)
	; NB. read IFR.T1 between the 2 reads of T1H, so that irqT1IntCount is consistent with T1H vs T1H2
	; Eg. IFR.T1 could become 1 between reading T1H & T1H2

	ldy		#SY6522_IFR
	lda		(MBTimer),y
	and		#IxR_TIMER1
	tax								; save IFR.T1

	ldy		#SY6522_TIMER1L_COUNTER
	lda		(MBTimer),y				; (reading T1C_l clears IFR.b6)
	sta		irqT1L
	ldy		#SY6522_TIMER1H_COUNTER
	lda		(MBTimer),y
	sta		irqT1H2

	txa								; test IFR.T1
	beq		+

	inc		irqT1IntCount			; Timer1 IRQ
	jmp		@exit

	;

+	ldy		#SY6522_IFR
	lda		#IxR_SSI263
	sta		(MBBase),y				; clear all remaining IRQs (ie. Speech - but for Phasor only if in Mockingboard mode)
									; NB. Phasor in native Phasor mode: IRQ cleared by write to DURPHON (reg0)

	lda		#1
	sta		isrFlag

	;------

	lda		KBD
	bpl		+
		bit		KBDSTRB
		cmp		#$80+27				; ESC?
		bne		+
			lda		#0
			beq		@endSpeech
+

	;------

	lda		#0
	ldy		#SSI_FILFREQ			; start with reg4
-		ora		(SpeechData),y
		dey
		bpl		-
	tay								; tst a
	bne		+

	; last phoneme complete, so finalise with PAUSE phoneme + disable SSI263 IRQ + disable 6522 T1 IRQ
@endSpeech
	sta		doingSpeech				; =0
	jsr		DisableSSI263
	lda		#IER_CLR|IxR_TIMER1
	ldy		#SY6522_IER
	sta		(MBTimer),y				; Disable Timer1 IRQ
	jmp		@exit					; NB. don't go via code to set SpeechData+=SSI_NUM_REGS

+	ldy		#SSI_FILFREQ			; start with reg4
-		lda		(SpeechData),y
		sta		(SSI263Base),y
		dey
		bpl		-

	; NB. don't reset T1C to $ffff - just let it continue to count down
	; So total speech phrase will be more accurate, but individual phonemes won't be. Maybe use T2 for each phoneme?

	lda		SpeechDataL
	clc
	adc		#SSI_NUM_REGS
	sta		SpeechDataL
	bcc		+
	inc		SpeechDataH
+

@exit
	pla
	tay
	pla
	tax

	lda		$45		; for Apple II/II+
	rti

;------------------------------------------------------------------------------

!zone data

doingSpeech		!byte 0

irqT1H			!byte 0
irqT1L			!byte 0
irqT1H2			!byte 0
irqT1IntCount	!byte 0
phraseDuration	!byte 0,0,0

ClassicAdv
; SMS's Mockingboard - Crowther and Woods Adventure "CLASSIC ADVENTURE" (duration=1200ms)
	!byte $29,$52,$B8,$7B,$E6
	!byte $2D,$52,$B8,$7B,$E6
	!byte $60,$52,$B8,$7B,$E6
	!byte $0C,$52,$B8,$7B,$E6
	!byte $30,$52,$B8,$7B,$E6
	!byte $47,$52,$B8,$7B,$E6
	!byte $29,$52,$B8,$7B,$E6
	!byte $4C,$52,$B8,$7B,$E6
	!byte $0C,$52,$B8,$7B,$E6
	!byte $25,$52,$B8,$7B,$E6
	!byte $33,$52,$B8,$7B,$E6
	!byte $EC,$52,$B8,$7B,$E6
	!byte $47,$52,$B8,$7B,$E6
	!byte $47,$52,$B8,$7B,$E6
	!byte $78,$52,$B8,$7B,$E6
	!byte $68,$52,$B8,$7B,$E6
	!byte $72,$52,$B8,$7B,$E6
	!byte $5C,$52,$B8,$7B,$E6
NullPhrase
	!byte 0,0,0,0,0
