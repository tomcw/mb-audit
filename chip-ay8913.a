;license:MIT
;(c) 2021 by TomCh
;
; AY8913 related
;

;------------------------------------------------------------------------------

DetectAY8913
; Pre: zpTmp1 = 6522 bitmap in b1:0
;	hasAY8913 = 0
;	isPhasorCard
; Post:
;	hasAY8913 = %00,%01,%10,%11 (or %1111 for Phasor)

	lda		isPhasorCard
	beq		+
		lda		#%00001111
		sta		hasAY8913			; can't test them, so just assume they are all working
		rts
+

	lda		#SY6522_A_BASE
	sta		zpTmp3
	lda		#1					; hasAY8913 mask
	sta		zpTmp2

-		lsr		zpTmp1			; 6522 at this addr?
		bcc		+

		jsr		Init6522ForAY

		lda		#AY_AFINE
		ldx		#$AA
		jsr		AY_WriteRegValue

		lda		#AY_BFINE
		ldx		#$55
		jsr		AY_WriteRegValue

		lda		#AY_CFINE
		ldx		#$69
		jsr		AY_WriteRegValue

		;

		ldx		#AY_AFINE
		jsr		AY_ReadRegValue
		cmp		#$AA
		bne		+

		ldx		#AY_BFINE
		jsr		AY_ReadRegValue
		cmp		#$55
		bne		+

		ldx		#AY_CFINE
		jsr		AY_ReadRegValue
		cmp		#$69
		bne		+

			lda		hasAY8913
			ora		zpTmp2
			sta		hasAY8913

+		asl		zpTmp2			; mask <<= 1
		lda		zpTmp3
		eor		#$80
		sta		zpTmp3
		bne		-

	rts

;------------------------------------------------------------------------------

TestAY8913
; Pre: hasAY8913 (Phasor: will be 0)
; Post: hasAY8913 (Phasor: set to %1111)

	lda		#COMPONENT_AY8913+1	; test component $21
	sta		testComponentNum
	lda		#$ff
	sta		testNum				; test #00

	lda		#SY6522_A_BASE
	sta		zpTmp3				; 6522 base addr

	lda		isPhasorCard
	beq		+

	; Phasor

	lda		#4
	sta		testNum				; test #04
	jsr		TestAYPhasor		; only do this test once, since it covers both SY6522's
	beq		@ok
	bne		@error

	; Mockingboard

+	lda		hasAY8913
	sta		zpTmp1

-		lsr		zpTmp1
		bcs		+
			inc		testNum
			inc		testNum
			bne		++

+		jsr		Init6522ForAY

		inc		testNum			; test #00, #02
		jsr		TestAYDatalines
		bne		@error

		inc		testNum			; test #01, #03
		jsr		TestAYAddrlines
		bne		@error

++		lda		zpTmp3
		eor		#$80
		sta		zpTmp3
		bne		-

@ok
	lda		#1
	rts

@error
; Pre: zpTmp2 = expected value
;	A = actual value

	sta		errorActual
	lda		zpTmp2
	sta		errorExpected

	lda		#0
	rts

;--------------------------------------

TestAYDatalines
; Pre:
;	zpTmp3 = SY6522_A_BASE or SY6522_A_PH_BASE or SY6522_B_BASE
; Post: Z=1(OK),0(NG)
;	zpTmp2 = expected, A = actual

	; Test the 8 data lines:
	; . Write then Read: $01, $02, $04, ..., $80

	jsr		resetSubTest
	jsr		incTotalTests

	lda		#1					; data to test
	sta		zpTmp2

-		lda		#AY_AFINE
		ldx		zpTmp2
		jsr		AY_WriteRegValue

		ldx		#AY_AFINE
		jsr		AY_ReadRegValue
		cmp		zpTmp2
		beq		+
		rts						; Z=0(NG)

+		jsr		AY_SetPortAOutput	; DDRA=0xFF

		asl		zpTmp2
		bne		-

	rts							; Z=1(OK)

;--------------------------------------

TestAYAddrlines
; Pre:
;	zpTmp3 = SY6522_A_BASE or SY6522_A_PH_BASE or SY6522_B_BASE
; Post: Z=1(OK),0(NG)
;	zpTmp2 = expected, A = actual

	; Test the 4 addr lines:
	; . Write regs: [0..$D] with values [0..$D]
	; . then read back

	jsr		resetSubTest
	jsr		incTotalTests

	lda		#0					; reg & data to test
	sta		zpTmp2

-		lda		zpTmp2
		tax
		jsr		AY_WriteRegValue

--		inc		zpTmp2
		lda		zpTmp2
		cmp		#AY_ENABLE		; skip ENABLE to avoid enabling ABC noise
		beq		--
		cmp		#AY_ESHAPE
		bne		-

	lda		#0					; reg & data to test
	sta		zpTmp2

-		ldx		zpTmp2
		jsr		AY_ReadRegValue
		cmp		zpTmp2
		beq		+
		rts						; Z=0(NG)
+
--		inc		zpTmp2
		lda		zpTmp2
		cmp		#AY_ENABLE		; skip ENABLE to avoid enabling ABC noise
		beq		--
		cmp		#AY_ESHAPE
		bne		-

	ldy		zpTmp3
	jsr		Init6522ForAY

	lda		#0					; Z=1(OK)
	rts

;--------------------------------------

TestAYPhasor
; Pre:
; Post: Z=1(OK),0(NG)
;	zpTmp2 = expected, A = actual

	lda		isPhasorCard
	bne		+
		rts						; Z=1(OK)
+

	; Test for 4 AYs (Phasor only)
	; . Write to each AY's reg#0 with values: $11,$22,$33,$44
	; . then read back (all should be $FF)
	; NB. Phasor doesn't support PortA input - so can't read the AY8913 regs

	jsr		resetSubTest
	jsr		incTotalTests

	lda		#PH_PHASOR
	jsr		SetPhasorMode

	;

	lda		#SY6522_A_PH_BASE
	sta		zpTmp3

	jsr		Init6522ForAY

	lda		#AY_AFINE
	ldx		#$11
	jsr		AY1_WriteRegValue

	lda		#AY_AFINE
	ldx		#$22
	jsr		AY2_WriteRegValue

	;

	lda		#SY6522_B_BASE
	sta		zpTmp3

	jsr		Init6522ForAY

	lda		#AY_AFINE
	ldx		#$33
	jsr		AY1_WriteRegValue

	lda		#AY_AFINE
	ldx		#$44
	jsr		AY2_WriteRegValue

	;

	ldy		#SY6522_A_PH_BASE+SY6522_ORA

	ldx		#AY_AFINE
	jsr		AY1_ReadRegValue
	ldx		#$FF				; $11
	cmp		#$FF
	bne		+

	ldx		#AY_AFINE
	jsr		AY2_ReadRegValue
	ldx		#$FF				; $22
	cmp		#$FF
	bne		+

	;

	ldy		#SY6522_B_BASE+SY6522_ORA

	ldx		#AY_AFINE
	jsr		AY1_ReadRegValue
	ldx		#$FF				; $33
	cmp		#$FF
	bne		+

	ldx		#AY_AFINE
	jsr		AY2_ReadRegValue
	ldx		#$FF				; $44

+	stx		zpTmp2				; expected
	sta		zpTmp1				; actual

++	lda		#SY6522_A_PH_BASE
	sta		zpTmp3
	jsr		Init6522ForAY		; Reset 6522-A's 2x AYs
	lda		#SY6522_B_BASE
	sta		zpTmp3
	jsr		Init6522ForAY		; Reset 6522-B's 2x AYs

	lda		#PH_MOCKINGBOARD
	jsr		SetPhasorMode

	lda		zpTmp1
	cmp		zpTmp2
	rts							; Z=1(OK), Z=0(NG)

;------------------------------------------------------------------------------

Init6522ForAY
; Pre: phasorMode
;	zpTmp3 = SY6522_A_BASE or SY6522_A_PH_BASE or SY6522_B_BASE
; Post: Y = SY6522_ORA for chip A or B

	lda		#SY6522_DDRB
	ora		zpTmp3
	tay
	lda		phasorMode
	cmp		#PH_PHASOR
	beq		+
		lda		#$07
		bne		++
+		lda		#$1f
++	sta		(MBBase),y

	lda		#SY6522_DDRA
	ora		zpTmp3
	tay
	lda		#$ff	; output
	sta		(MBBase),y

	ldy		zpTmp3
	jmp		SF_ChipReset		; Post: Y=SY6522_ORA for chip A or B

	;

AY_WriteRegValue
; Pre: Y = SY6522_ORA for chip A or B
;	A=reg#
;	X=value
	jsr		SF_SelectReg
	txa
	jmp		SF_WriteReg

AY_ReadRegValue
; Pre: Y = SY6522_ORA for chip A or B
;	X=reg#
; Post:
;	A=value
	jsr		AY_SetPortAOutput
	txa
	jsr		SF_SelectReg
	jsr		AY_SetPortAInput
	jmp		AY_ReadReg

	;

AY_SetPortAOutput
; Pre: Y = SY6522_ORA for chip A or B
; Post: Y = SY6522_ORA for chip A or B
	iny
	iny		; Y = DDRA
	lda		#$ff
	sta		(MBBase),y
	dey
	dey		; Y = ORA
	rts

AY_SetPortAInput
; Pre: Y = SY6522_ORA for chip A or B
; Post: Y = SY6522_ORA for chip A or B
	iny
	iny		; Y = DDRA
	lda		#$0
	sta		(MBBase),y
	dey
	dey		; Y = ORA
	rts

	;

AY_ReadReg
; Pre: Y = SY6522_ORA for chip A or B
;	6522.DDRA = $00 (Port-A direction = input)
; Post: Y = SY6522_ORA for chip A or B
;	A = data
	lda		#AY_READ
	jsr		+
	lda		(MBBase),y		; Read Port-A
	rts

SF_SelectReg
; Pre: Y = SY6522_ORA for chip A or B
; Post: Y = SY6522_ORA for chip A or B
;	A = reg#
	sta		(MBBase),y
	lda		#AY_LATCH
	bne		+

SF_WriteReg
; Pre: Y = SY6522_ORA for chip A or B
;	6522.DDRA = $FF (Port-A direction = output)
; Post: Y = SY6522_ORA for chip A or B
;	A = data
	sta		(MBBase),y
	lda		#AY_WRITE
	bne		+

SF_ChipReset
; NB. For native Phasor mode, reset both AY's, since cmd=AY_RESET|(%00<<3) - and CS is active low
; Pre: Y = SY6522_A_BASE or SY6522_B_BASE
; Post: Y = SY6522_ORA for chip A or B
	lda		#AY_RESET
	beq		++

+	dey		; Y = ORB (reg#0)

++	sta		(MBBase),y
	lda		#AY_INACTIVE
	sta		(MBBase),y
	iny		; Y = ORA (reg#1)
	rts

;------------------------------------------------------------------------------
; Phasor (native mode) routines:

AY1_ReadReg
; Pre: Y = SY6522_ORA for chip A or B
;	6522.DDRA = $00 (Port-A direction = input)
; Post: Y = SY6522_ORA for chip A or B
;	A = data
	lda		#AY_READ|AY_CS1
	jsr		+
	lda		(MBBase),y		; Read Port-A
	rts
AY2_ReadReg
	lda		#AY_READ|AY_CS2
	jsr		++
	lda		(MBBase),y		; Read Port-A
	rts

AY1_SelectReg
; Pre: Y = SY6522_ORA for chip A or B
; Post: Y = SY6522_ORA for chip A or B
;	A = reg#
	sta		(MBBase),y
	lda		#AY_LATCH|AY_CS1
	bne		+
AY2_SelectReg
	sta		(MBBase),y
	lda		#AY_LATCH|AY_CS2
	bne		++

AY1_WriteReg
; Pre: Y = SY6522_ORA for chip A or B
;	6522.DDRA = $FF (Port-A direction = output)
; Post: Y = SY6522_ORA for chip A or B
;	A = data
	sta		(MBBase),y
	lda		#AY_WRITE|AY_CS1
	bne		+
AY2_WriteReg
	sta		(MBBase),y
	lda		#AY_WRITE|AY_CS2
	bne		++

+	dey		; Y = ORB (reg#0)
	sta		(MBBase),y
	lda		#AY_INACTIVE|AY_CS1
	sta		(MBBase),y
	iny		; Y = ORA (reg#1)
	rts

++	dey		; Y = ORB (reg#0)
	sta		(MBBase),y
	lda		#AY_INACTIVE|AY_CS2
	sta		(MBBase),y
	iny		; Y = ORA (reg#1)
	rts

;------------------------------------------------------------------------------

AY1_WriteRegValue
; Pre: Y = SY6522_ORA for chip A or B
;	A=reg#
;	X=value
	jsr		AY1_SelectReg
	txa
	jmp		AY1_WriteReg

AY2_WriteRegValue
; Pre: Y = SY6522_ORA for chip A or B
;	A=reg#
;	X=value
	jsr		AY2_SelectReg
	txa
	jmp		AY2_WriteReg

AY1_ReadRegValue
; Pre: Y = SY6522_ORA for chip A or B
;	X=reg#
; Post:
;	A=value
	jsr		AY_SetPortAOutput
	txa
	jsr		AY1_SelectReg
	jsr		AY_SetPortAInput
	jmp		AY1_ReadReg

AY2_ReadRegValue
; Pre: Y = SY6522_ORA for chip A or B
;	X=reg#
; Post:
;	A=value
	jsr		AY_SetPortAOutput
	txa
	jsr		AY2_SelectReg
	jsr		AY_SetPortAInput
	jmp		AY2_ReadReg
